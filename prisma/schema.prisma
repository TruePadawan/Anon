generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  access_token      String  @db.String
  expires_at        Int?
  refresh_token     String? @db.String
  id_token          String? @db.String
  provider          String
  providerAccountId String
  scope             String?
  token_type        String?
  session_state     String?
  type              String
  userId            String  @db.ObjectId
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  expires      DateTime @db.Date
  sessionToken String   @unique
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserProfile {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  accountName String        @unique
  avatarUrl   String?
  bio         String        @default("Hello, I just joined ANON")
  color       String
  displayName String
  createdAt   Int
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String        @unique @db.ObjectId
  publicPosts PublicPost[]
  comments    Comment[]
  groups      Group[]
  groupPosts  GroupPost[]
  groupMember GroupMember[]
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  email         String?      @unique
  /// Could not determine type: the field only had null or empty values in the sample set.
  emailVerified DateTime?
  image         String?
  name          String?
  account       Account[]
  session       Session[]
  profile       UserProfile?
}

model PublicPost {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  content         Json
  author          UserProfile? @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId        String?      @db.ObjectId
  commentsAllowed Boolean      @default(true)
  createdAt       Int
  editedAt        Int?
  isDeleted       Boolean      @default(false)
  comments        Comment[]
}

model GroupPost {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  content         Json
  author          UserProfile? @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId        String?      @db.ObjectId
  commentsAllowed Boolean      @default(true)
  createdAt       Int
  editedAt        Int?
  group           Group        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId         String       @db.ObjectId
  isApproved      Boolean
  isDeleted       Boolean      @default(false)
  comments        Comment[]
}

model Comment {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  // relation for linking a comment to a public post
  publicPost    PublicPost?  @relation(fields: [publicPostId], references: [id], onDelete: SetNull)
  publicPostId  String?      @db.ObjectId
  // relation for linking a comment to a group post
  groupPost     GroupPost?   @relation(fields: [groupPostId], references: [id], onDelete: SetNull)
  groupPostId   String?      @db.ObjectId
  content       Json
  // relation for linking a comment to a profile
  author        UserProfile? @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId      String?      @db.ObjectId
  createdAt     Int
  editedAt      Int?
  // self relation that handles a comment having replies
  parentComment Comment?     @relation("replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies       Comment[]    @relation("replies")
  parentId      String?      @db.ObjectId
  isDeleted     Boolean      @default(false)
}

model Group {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  admin      UserProfile @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId    String      @db.ObjectId
  name       String      @unique
  desc       String?
  banner_url String?
  createdAt  Int

  // group settings
  groupJoinId        String  @unique @default(uuid())
  isAnonymous        Boolean
  autoMemberApproval Boolean
  autoPostApproval   Boolean

  groupPosts   GroupPost[]
  groupMembers GroupMember[]
}

model GroupMember {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  group            Group            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId          String           @db.ObjectId
  user             UserProfile      @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  userProfileId    String           @db.ObjectId
  membershipStatus MembershipStatus
}

enum MembershipStatus {
  PENDING
  JOINED
  BANNED
}
