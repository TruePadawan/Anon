generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  access_token      String  @db.String
  expires_at        Int?
  refresh_token     String? @db.String
  id_token          String? @db.String
  provider          String
  providerAccountId String
  scope             String?
  token_type        String?
  session_state     String?
  type              String
  userId            String  @db.ObjectId
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  expires      DateTime @db.Date
  sessionToken String   @unique
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserProfile {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  accountName String        @unique
  avatarUrl   String?
  bio         String        @default("Hello, I just joined ANON")
  color       String
  displayName String
  createdAt   Int
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String        @unique @db.ObjectId
  PublicPost  PublicPost[]
  Comment     Comment[]
  Group       Group[]
  GroupPost   GroupPost[]
  GroupMember GroupMember[]
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  email         String?      @unique
  /// Could not determine type: the field only had null or empty values in the sample set.
  emailVerified DateTime?
  image         String?
  name          String?
  Account       Account[]
  Session       Session[]
  profile       UserProfile?
}

model PublicPost {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  content         Json
  author          UserProfile @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId        String      @db.ObjectId
  commentsAllowed Boolean     @default(true)
  createdAt       Int
}

model GroupPost {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  content         Json
  author          UserProfile @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId        String      @db.ObjectId
  commentsAllowed Boolean     @default(true)
  createdAt       Int
  group           Group       @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId         String      @db.ObjectId
  isApproved      Boolean
}

model Comment {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  commentGroupId  String
  parentComment   Comment?    @relation("ParentComment", fields: [parentCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentCommentId String?     @db.ObjectId
  Comment         Comment[]   @relation("ParentComment")
  content         Json
  author          UserProfile @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId        String      @db.ObjectId
  createdAt       Int
  editedAt        Int         @default(0)
}

model Group {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  admin       UserProfile   @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId     String        @db.ObjectId
  name        String        @unique
  desc        String?
  banner_url  String?
  createdAt   Int
  // a group MUST have a referenced group settings document which can't be deleted while the group exists
  settings    GroupSettings @relation(fields: [settingsId], references: [id], onDelete: Restrict)
  GroupPost   GroupPost[]
  settingsId  String        @unique @db.ObjectId
  GroupMember GroupMember[]
}

model GroupSettings {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  groupJoinId        String  @unique @default(uuid())
  isAnonymous        Boolean
  autoMemberApproval Boolean
  autoPostApproval   Boolean
  Group              Group?
}

model GroupMember {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  group            Group            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId          String           @db.ObjectId
  user             UserProfile      @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  userProfileId    String           @db.ObjectId
  membershipStatus MembershipStatus
}

enum MembershipStatus {
  PENDING
  JOINED
  BANNED
}
